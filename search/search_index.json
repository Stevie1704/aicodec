{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI Codec Documentation","text":"<p>AI Codec is a lightweight, CLI-first tool that brings a structured, reviewable, and reversible workflow to applying LLM-generated code to your projects.</p> <p>In an era of increasingly complex agentic coding systems, AI Codec embraces a simpler, more direct approach. Interacting with an LLM in a chat window is a powerful and flexible workflow that many developers prefer, but it lacks a safe bridge to the local filesystem. This tool provides that bridge.</p> <p>It acts as a safe, sane link between your local development environment and the raw power of Large Language Models. Instead of chaotic copy-pasting, you get a formal, git-like review process for AI-driven changes.</p>"},{"location":"#the-problem-with-manual-ai-integration","title":"The Problem with Manual AI Integration","text":"<p>Integrating LLM suggestions into a project is often a messy, manual process. You face:</p> <ul> <li>Unstructured Output: Raw code blocks from a chatbot are hard to parse and apply across multiple files.</li> <li>Tedious Copy-Pasting: Manually transferring code is slow, error-prone, and painful.</li> <li>No Safety Net: There's no clear diff to review before changes hit your file system, and no easy \"undo\" button if things go wrong.</li> </ul>"},{"location":"#the-ai-codec-solution","title":"The AI Codec Solution","text":"<p>AI Codec solves these problems by treating LLM-generated changes as a formal, reviewable patch, much like a pull request.</p> <ul> <li>\ud83e\udd16 Structured Interaction: Enforces a simple JSON schema, turning the LLM's output into a structured set of file operations.</li> <li>\ud83e\uddd0 Safe Review Process: The <code>aicodec apply</code> command launches a web UI with a git-like diffing experience. You see exactly what will change before any files are touched.</li> <li>\u2705 Developer in Control: You have the final say. Selectively apply, reject, or even edit the LLM's suggestions live in the diff viewer.</li> <li>\u23ea Atomic &amp; Reversible Changes: The <code>apply</code> and <code>revert</code> commands make applying LLM suggestions a safe transaction that you can undo with a single command.</li> </ul>"},{"location":"#who-is-this-for","title":"Who Is This For?","text":"<p>AI Codec is designed for the developer who:</p> <ul> <li>Prefers the flexibility of interacting directly with an LLM's web interface (like ChatGPT, Claude, Gemini, etc.).</li> <li>Wants to avoid the complexity and cost of managing API keys.</li> <li>Needs a structured, safe, and reversible way to apply AI-generated code.</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>\ud83d\ude80 Ready to start? Jump into the Getting Started guide for a full walkthrough.</li> <li>\u2699\ufe0f Want to customize? Learn about all the options in the Configuration reference.</li> </ul>"},{"location":"configuration/","title":"Configuration Reference","text":"<p>The <code>aicodec</code> workflow is controlled by the <code>.aicodec/config.json</code> file, which is created when you run <code>aicodec init</code>. This file allows you to customize the tool's behavior for your specific project.</p> <p>While command-line flags can override these settings for a single run, editing the config file is the best way to set persistent project-wide defaults.</p>"},{"location":"configuration/#file-structure","title":"File Structure","text":"<p>The <code>config.json</code> is organized into sections that correspond to the main commands:</p> <pre><code>{\n    \"aggregate\": {\n        // Settings for the 'aggregate' command\n    },\n    \"prompt\": {\n        // Settings for the 'prompt' command\n    },\n    \"prepare\": {\n        // Settings for the 'prepare' command\n    },\n    \"apply\": {\n        // Settings for the 'apply' command\n    }\n}\n</code></pre>"},{"location":"configuration/#aggregate-section","title":"<code>aggregate</code> Section","text":"<p>This section controls which files are collected into <code>context.json</code>.</p> <ul> <li> <p><code>\"directories\": [\"src\", \"tests\"]</code></p> <ul> <li>A list of root directories to scan for files. <code>.</code> refers to the project root.</li> <li>Default: <code>[\".\"]</code></li> </ul> </li> <li> <p><code>\"use_gitignore\": true | false</code></p> <ul> <li>If <code>true</code>, <code>aicodec</code> will respect the rules in your project's <code>.gitignore</code> file.</li> <li>Default: <code>true</code></li> </ul> </li> <li> <p><code>\"include\": [\"src/api/**\", \"*.conf\"]</code></p> <ul> <li>A list of gitignore-style glob patterns to always include, even if they are excluded by other rules (like <code>.gitignore</code>).</li> </ul> </li> <li> <p><code>\"exclude\": [\"dist/\", \"**/*.log\"]</code></p> <ul> <li>A list of gitignore-style glob patterns to always exclude. Note that <code>.git/**</code> and <code>.aicodec/**</code> are always excluded by default.</li> </ul> </li> </ul> <p>Note on Precedence: The <code>include</code> rules have higher precedence than <code>exclude</code> rules (including <code>.gitignore</code>). If a file matches both an include and an exclude pattern, it will be included.</p>"},{"location":"configuration/#prompt-section","title":"<code>prompt</code> Section","text":"<p>This section controls how the LLM prompt is generated by <code>aicodec prompt</code>.</p> <ul> <li> <p><code>\"output_file\": \".aicodec/prompt.txt\"</code></p> <ul> <li>The default path where the generated prompt file is saved.</li> <li>Default: <code>.aicodec/prompt.txt</code></li> </ul> </li> <li> <p><code>\"tech_stack\": \"Python/FastAPI\"</code></p> <ul> <li>A string describing your project's language or tech stack. This is inserted into the prompt template to give the LLM better context.</li> <li>Default: (none)</li> </ul> </li> <li> <p><code>\"minimal\": true | false</code></p> <ul> <li>If <code>true</code>, a smaller, more concise prompt template is used. This reduces token count but may provide the LLM with less guidance.</li> <li>Default: <code>false</code></li> </ul> </li> <li> <p><code>\"include_code\": true | false</code></p> <ul> <li>If <code>false</code>, the code from <code>context.json</code> will not be included in the prompt. Useful for asking general questions.</li> <li>Default: <code>true</code></li> </ul> </li> <li> <p><code>\"include_map\": true | false</code></p> <ul> <li>If <code>true</code>, the <code>prompt</code> command will include the <code>.aicodec/repo_map.md</code> file by default. This can be overridden by the <code>--include-map</code> or <code>--exclude-map</code> flags.</li> <li>Default: <code>false</code></li> </ul> </li> <li> <p><code>\"clipboard\": true | false</code></p> <ul> <li>If <code>true</code>, the <code>prompt</code> command will copy the generated prompt to the clipboard by default instead of writing it to a file.</li> <li>Default: <code>false</code></li> </ul> </li> </ul>"},{"location":"configuration/#prepare-section","title":"<code>prepare</code> Section","text":"<p>This section controls how <code>aicodec prepare</code> handles the LLM's response.</p> <ul> <li> <p><code>\"changes\": \".aicodec/changes.json\"</code></p> <ul> <li>The path where the validated JSON response from the LLM is stored, ready for the <code>apply</code> step.</li> <li>Default: <code>.aicodec/changes.json</code></li> </ul> </li> <li> <p><code>\"from_clipboard\": true | false</code></p> <ul> <li>If <code>true</code>, the <code>prepare</code> command will attempt to read the LLM's response directly from the clipboard by default.</li> <li>Default: <code>false</code></li> </ul> </li> </ul>"},{"location":"configuration/#apply-section","title":"<code>apply</code> Section","text":"<p>This section controls the target directory for applying changes.</p> <ul> <li><code>\"output_dir\": \".\"</code><ul> <li>The root directory where file changes will be applied. In most cases, this should be your project root.</li> <li>Default: <code>.</code></li> </ul> </li> </ul>"},{"location":"commands/aggregate/","title":"<code>aicodec aggregate</code>","text":"<p>Scans your project based on your configuration, finds all relevant files, and aggregates their content into a single <code>.aicodec/context.json</code> file. This file is then used by <code>aicodec prompt</code> to build the context for the LLM.</p> <p>By default, this command runs in an incremental mode. It caches file hashes and only includes content from files that have changed since the last run. This saves time and helps manage the size of the context sent to the LLM.</p>"},{"location":"commands/aggregate/#usage","title":"Usage","text":"<pre><code># Run an incremental aggregation\naicodec aggregate\n\n# Exclude all markdown files and include only the src/api directory\naicodec aggregate -e \"*.md\" -i \"src/api/**\"\n\n# Run a full aggregation, ignoring the cache\naicodec aggregate --full\n</code></pre>"},{"location":"commands/aggregate/#options","title":"Options","text":"<p>All command-line options override the settings in your <code>.aicodec/config.json</code> file.</p> <ul> <li><code>-c, --config &lt;PATH&gt;</code>: Specifies the path to the configuration file. Default: <code>.aicodec/config.json</code>.</li> <li><code>-d, --directories &lt;PATH...&gt;</code>: One or more root directories to scan for files. Overrides the <code>directories</code> setting in the config.</li> <li><code>-i, --include &lt;PATTERN...&gt;</code>: One or more gitignore-style glob patterns to explicitly include. These rules override any exclusions.</li> <li><code>-e, --exclude &lt;PATTERN...&gt;</code>: One or more gitignore-style glob patterns to exclude.</li> <li><code>--full</code>: Performs a full aggregation, ignoring the cache of file hashes and including all files that match the criteria, regardless of whether they have changed.</li> <li><code>--count-tokens</code>: Counts the number of tokens in the final <code>context.json</code> output using the <code>cl100k_base</code> encoding (used by GPT-4) and displays it in the summary.</li> <li><code>--use-gitignore</code> / <code>--no-gitignore</code>: A mutually exclusive pair of flags to explicitly enable or disable using the <code>.gitignore</code> file for exclusions.</li> </ul>"},{"location":"commands/apply/","title":"<code>aicodec apply</code>","text":"<p>Launches a local web server and opens a browser-based UI to review, edit, and apply the proposed changes from the LLM.</p> <p>This command is the core safety feature of AI Codec. It gives you full control to inspect and validate every change with a visual diff before any files on your system are modified.</p>"},{"location":"commands/apply/#prerequisites","title":"Prerequisites","text":"<p>This command requires a valid <code>.aicodec/changes.json</code> file, which is created by the <code>prepare</code> command.</p>"},{"location":"commands/apply/#usage","title":"Usage","text":"<pre><code># Launch the interactive review UI\naicodec apply\n\n# Apply all changes directly without the UI\naicodec apply --all\n</code></pre>"},{"location":"commands/apply/#the-review-ui","title":"The Review UI","text":"<p>The web UI allows you to:</p> <ul> <li>View a summary of the proposed changes.</li> <li>See a list of all files to be created, modified, or deleted.</li> <li>Select or deselect individual changes to be applied.</li> <li>View a color-coded, side-by-side diff for each file.</li> <li>Directly edit the LLM's proposed content in the diff viewer before applying.</li> <li>Save your edits back to the <code>changes.json</code> file without applying them.</li> </ul> <p>When you apply changes, the tool creates a <code>.aicodec/revert.json</code> file that allows the entire operation to be undone with the <code>revert</code> command.</p>"},{"location":"commands/apply/#options","title":"Options","text":"<ul> <li><code>-c, --config &lt;PATH&gt;</code>: Specifies the path to the configuration file. Default: <code>.aicodec/config.json</code>.</li> <li><code>-od, --output-dir &lt;PATH&gt;</code>: The project directory where changes should be applied. Overrides the <code>output_dir</code> setting in the config.</li> <li><code>--changes &lt;PATH&gt;</code>: The path to the LLM changes JSON file to be reviewed. Overrides the <code>changes</code> path in the config.</li> <li><code>-a, --all</code>: Applies all proposed changes directly without launching the interactive review UI. Use this when you trust the source of the changes.</li> </ul>"},{"location":"commands/buildmap/","title":"<code>aicodec buildmap</code>","text":"<p>Scans your project and generates a Markdown file (<code>.aicodec/repo_map.md</code>) containing a tree-like representation of your project's structure.</p> <p>This command is designed to provide a high-level overview of the repository for an LLM. It is separate from <code>aicodec aggregate</code> to allow you to generate a complete map of your project while creating a focused content context with <code>aggregate</code>.</p> <p>The <code>buildmap</code> command respects your project's <code>.gitignore</code> file by default but intentionally ignores the <code>include</code> and <code>exclude</code> rules from your <code>.aicodec/config.json</code> to ensure the map is comprehensive.</p>"},{"location":"commands/buildmap/#usage","title":"Usage","text":"<pre><code># Build the repository map, respecting .gitignore\naicodec buildmap\n\n# Build the map without using .gitignore\naicodec buildmap --no-gitignore\n</code></pre>"},{"location":"commands/buildmap/#options","title":"Options","text":"<ul> <li><code>-c, --config &lt;PATH&gt;</code>: Specifies the path to the configuration file. Default: <code>.aicodec/config.json</code>.</li> <li><code>--use-gitignore</code> / <code>--no-gitignore</code>: A mutually exclusive pair of flags to explicitly enable or disable using the <code>.gitignore</code> file for exclusions. The default is to use it.</li> </ul>"},{"location":"commands/init/","title":"<code>aicodec init</code>","text":"<p>Initializes <code>aicodec</code> in your project's root directory.</p> <p>This command runs an interactive wizard that guides you through creating a <code>.aicodec/config.json</code> file. You only need to run this once per project.</p>"},{"location":"commands/init/#usage","title":"Usage","text":"<pre><code>aicodec init\n</code></pre> <p>The wizard will ask a series of questions to configure the core components of the tool.</p>"},{"location":"commands/init/#configuration-steps","title":"Configuration Steps","text":"<ol> <li>File Aggregation: Set rules for which files and directories to include or exclude when creating the context for the LLM.</li> <li>Gitignore Usage: Choose whether to respect your project's <code>.gitignore</code> file and whether <code>aicodec</code> should add its own <code>.aicodec/</code> directory to it (recommended).</li> <li>LLM Interaction: Set default behaviors for handling prompts and LLM responses, such as reading from or writing to the system clipboard.</li> <li>Tech Stack: Optionally provide information about your project's language or framework to improve the LLM's context.</li> </ol> <p>For a detailed breakdown of every available option, see the Configuration Reference.</p>"},{"location":"commands/init/#options","title":"Options","text":"<p>This command has no command-line options as it is fully interactive. If a <code>.aicodec/config.json</code> file already exists, it will ask for confirmation before overwriting it.</p>"},{"location":"commands/prepare/","title":"<code>aicodec prepare</code>","text":"<p>Prepares the LLM's JSON response for the review step. This command validates the JSON against the required schema and saves it to the changes file (by default, <code>.aicodec/changes.json</code>).</p>"},{"location":"commands/prepare/#usage","title":"Usage","text":"<pre><code>aicodec prepare [OPTIONS]\n</code></pre> <p>This command can operate in two modes:</p> <ol> <li>From Clipboard: Reads content directly from your clipboard, validates it, and saves it.</li> <li>Editor Mode: Creates an empty changes file and opens it in your default text editor for you to paste the JSON into.</li> </ol>"},{"location":"commands/prepare/#options","title":"Options","text":"<ul> <li><code>-c, --config &lt;PATH&gt;</code>: Specifies the path to the configuration file. Default: <code>.aicodec/config.json</code>.</li> <li><code>--changes &lt;PATH&gt;</code>: The path where the validated LLM changes will be saved. Overrides the <code>changes</code> path in the config.</li> <li><code>--from-clipboard</code>: Use this flag to read the LLM's JSON response directly from the system clipboard. This overrides the default behavior set in your config.</li> </ul>"},{"location":"commands/prompt/","title":"<code>aicodec prompt</code>","text":"<p>Generates a complete, ready-to-use prompt for an LLM. It combines a prompt template with your aggregated code context (<code>context.json</code>), an optional repository map, and the required JSON output schema.</p>"},{"location":"commands/prompt/#prerequisites","title":"Prerequisites","text":"<p>This command usually requires a <code>.aicodec/context.json</code> file, which is created by the <code>aggregate</code> command. You can run it without a context file by using the <code>--no-code</code>, <code>--new-project</code>, or <code>--include-map</code> flag.</p>"},{"location":"commands/prompt/#usage","title":"Usage","text":"<pre><code># Generate a prompt for a refactoring task\naicodec prompt --task \"Refactor the User class to use composition instead of inheritance.\"\n\n# Build the repo map first\naicodec buildmap\n\n# Then generate a prompt that includes the map\naicodec prompt --include-map --task \"Where should I add a new caching service?\"\n\n# Generate a prompt for a new project, which excludes code context\naicodec prompt --new-project --task \"Create a simple FastAPI application with a single endpoint '/hello' that returns a JSON object.\"\n</code></pre>"},{"location":"commands/prompt/#options","title":"Options","text":"<ul> <li><code>-c, --config &lt;PATH&gt;</code>: Specifies the path to the configuration file. Default: <code>.aicodec/config.json</code>.</li> <li><code>--task \"&lt;YOUR TASK DESCRIPTION&gt;\"</code>: The specific coding task you want the LLM to perform. This text is inserted into the prompt template.</li> <li><code>--tech-stack \"&lt;YOUR TECH STACK&gt;\"</code>: The primary language or tech stack for the LLM to consider.</li> <li><code>--output-file &lt;PATH&gt;</code>: Specifies where to save the generated prompt file. Overrides the <code>output_file</code> setting in the config.</li> <li><code>--clipboard</code>: Copies the generated prompt directly to the system clipboard instead of writing it to a file. Overrides the default behavior in the config.</li> <li><code>--minimal</code>: Uses a minimal prompt template. This reduces context size but may yield less reliable results from the LLM.</li> <li><code>--no-code</code>: Excludes the code context from <code>.aicodec/context.json</code> from the prompt. Useful for asking general questions or when the context is not relevant.</li> <li><code>-im</code>, <code>--include-map</code>: Includes the repository map from <code>.aicodec/repo_map.md</code> in the prompt. You must run <code>aicodec buildmap</code> first. Overrides the default set in the config.</li> <li><code>-em</code>, <code>--exclude-map</code>: Explicitly excludes the repository map from the prompt. Overrides the default set in the config.</li> <li><code>-noi</code>, <code>--no-output-instruction</code>: Excludes the entire block for the output instructions from the prompt. This is useful when you want to have a feedback to your code base or provide custom output instructions directly in your task description.</li> <li><code>-np</code>, <code>--new-project</code>: Optimizes the prompt for generating a new project from scratch. It adjusts the task wording and automatically implies <code>--no-code</code>.</li> </ul>"},{"location":"commands/revert/","title":"<code>aicodec revert</code>","text":"<p>Launches the web UI to restore your files to their state before the last <code>aicodec apply</code> operation. This command acts as a safe and reliable \"undo\" button.</p> <p>It uses the <code>.aicodec/revert.json</code> file that was automatically created during the <code>apply</code> step.</p>"},{"location":"commands/revert/#prerequisites","title":"Prerequisites","text":"<p>This command requires a <code>.aicodec/revert.json</code> file from a previous <code>apply</code> operation.</p>"},{"location":"commands/revert/#usage","title":"Usage","text":"<pre><code># Launch the interactive revert UI\naicodec revert\n\n# Revert all changes directly without the UI\naicodec revert --all\n</code></pre> <p>Just like <code>apply</code>, this command opens a review UI showing the changes needed to revert your files. You can selectively apply these reversions and must click the \"Revert Selected Changes\" button to confirm.</p>"},{"location":"commands/revert/#options","title":"Options","text":"<ul> <li><code>-c, --config &lt;PATH&gt;</code>: Specifies the path to the configuration file. Default: <code>.aicodec/config.json</code>.</li> <li><code>-od, --output-dir &lt;PATH&gt;</code>: The project directory where changes should be reverted. This should be the same directory targeted by the <code>apply</code> command. Overrides the <code>output_dir</code> setting in the config.</li> <li><code>-a, --all</code>: Reverts all changes from the last <code>apply</code> operation directly without launching the interactive review UI.</li> </ul>"},{"location":"commands/schema/","title":"<code>aicodec schema</code>","text":"<p>Prints the required JSON schema to standard output.</p> <p>This schema defines the exact structure that an LLM's response must follow to be considered valid by <code>aicodec prepare</code>. You should include this schema in your prompt to the LLM to ensure it generates a valid response.</p>"},{"location":"commands/schema/#usage","title":"Usage","text":"<pre><code>aicodec schema\n</code></pre> <p>You can easily pipe this output to your clipboard for use in your prompt:</p> <ul> <li>macOS: <code>aicodec schema | pbcopy</code></li> <li>Windows: <code>aicodec schema | clip</code></li> <li>Linux (with xclip): <code>aicodec schema | xclip -selection clipboard</code></li> </ul>"},{"location":"commands/schema/#options","title":"Options","text":"<p>This command has no command-line options.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>To get started, you need to install the <code>aicodec</code> CLI tool. Choose the method that best fits your system.</p>"},{"location":"getting-started/installation/#method-1-using-pip-recommended-for-python-users","title":"Method 1: Using pip (Recommended for Python users)","text":"<p>If you have Python and <code>pip</code> installed, this is the simplest way to get <code>aicodec</code>.</p> <pre><code>pip install aicodec\n</code></pre> <p>This command downloads the latest version from the Python Package Index (PyPI) and makes the <code>aicodec</code> command available in your terminal.</p>"},{"location":"getting-started/installation/#method-2-from-pre-built-binaries","title":"Method 2: From Pre-built Binaries","text":"<p>If you don't have Python or prefer a standalone executable, you can download one for your operating system from the latest GitHub release.</p>"},{"location":"getting-started/installation/#automated-installation-recommended","title":"Automated Installation (Recommended)","text":"<p>For a quick setup, you can run one of the following commands in your terminal. These scripts automatically download the correct binary, unpack it, and add it to your system's PATH.</p> <p>For macOS and Linux:</p> <pre><code>curl -sSL https://raw.githubusercontent.com/Stevie1704/aicodec/main/scripts/install.sh | bash\n</code></pre> <p>For Windows (in PowerShell):</p> <pre><code>powershell -Command \"irm https://raw.githubusercontent.com/Stevie1704/aicodec/main/scripts/install.ps1 | iex\"\n</code></pre>"},{"location":"getting-started/installation/#manual-installation","title":"Manual Installation","text":"<p>If you prefer not to execute a remote script, you can perform the steps manually.</p> <p>For macOS and Linux:</p> <ol> <li>Download the <code>.zip</code> for your system from the releases page (e.g., <code>aicodec-macos-amd64.zip</code>) and unzip it.</li> <li>Make the file executable:     <code>bash     chmod +x /path/to/unzipped/aicodec-binary</code></li> <li>Move the executable to a directory in your system's <code>PATH</code>. A common choice is <code>/usr/local/bin</code>:     <code>bash     sudo mv /path/to/unzipped/aicodec-binary /usr/local/bin/aicodec</code></li> </ol> <p>For Windows:</p> <ol> <li>Download the <code>.zip</code> binary for your system (<code>aicodec-windows-amd64.zip</code>) and unzip it.</li> <li>Move the extracted folder to a permanent location (e.g., <code>C:\\Tools\\aicodec</code>).</li> <li>Add this folder's path to your user or system <code>Path</code> environment variable.</li> </ol>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>After any of these methods, open a new terminal and verify the installation:</p> <pre><code>aicodec --help\n</code></pre> <p>You should see the main help menu, confirming the tool is ready to use.</p>"},{"location":"getting-started/installation/#uninstallation","title":"Uninstallation","text":"<p>If installed with pip:</p> <pre><code>pip uninstall aicodec\n</code></pre> <p>If installed with the automated script:</p> <ul> <li>macOS/Linux: </li> </ul> <pre><code>curl -sSL https://raw.githubusercontent.com/Stevie1704/aicodec/main/scripts/uninstall.sh | bash\n</code></pre> <ul> <li>Windows: </li> </ul> <pre><code>powershell -Command \"irm https://raw.githubusercontent.com/Stevie1704/aicodec/main/scripts/uninstall.ps1 | iex\"\n</code></pre> <p>If installed manually: Simply delete the <code>aicodec</code> binary file and remove its directory from your system's PATH if you added it.</p>"},{"location":"getting-started/tutorial/","title":"Step-by-Step Tutorial","text":"<p>This guide will walk you through a complete <code>aicodec</code> workflow, from initializing a project to applying and reverting an LLM-generated change.</p> <p>Our Goal: We'll start with a simple Python project containing a single function. We'll then ask an LLM to add a new function and a unit test for it.</p>"},{"location":"getting-started/tutorial/#step-1-project-setup","title":"Step 1: Project Setup","text":"<p>First, let's create a simple project to work with.</p> <ol> <li> <p>Create a new directory and <code>cd</code> into it:     <code>bash     mkdir my-python-project     cd my-python-project</code></p> </li> <li> <p>Create a file named <code>calculator.py</code> with this content:     <code>python     # calculator.py     def add(a, b):         \"\"\"Adds two numbers together.\"\"\"         return a + b</code></p> </li> </ol> <p>Your project now has one file.</p>"},{"location":"getting-started/tutorial/#step-2-initialize-ai-codec","title":"Step 2: Initialize AI Codec","text":"<p>Run the <code>init</code> command in your project's root directory. This creates the <code>.aicodec/config.json</code> file that powers the tool.</p> <pre><code>aicodec init\n</code></pre> <p>The interactive wizard will ask you a few questions. For this tutorial, you can accept the defaults for most prompts by pressing <code>Enter</code>.</p> <ul> <li>Use <code>.gitignore</code>? Yes</li> <li>Update <code>.gitignore</code>? Yes</li> <li>Configure additional inclusions/exclusions? No</li> <li>Use minimal prompt? No</li> <li>Primary tech stack? python</li> <li>Read from clipboard by default (<code>prepare</code>)? Yes</li> <li>Include code by default (<code>prompt</code>)? Yes</li> <li>Copy prompt to clipboard by default? Yes</li> </ul> <p>This will create a <code>.aicodec</code> directory and a <code>config.json</code> file inside it.</p>"},{"location":"getting-started/tutorial/#step-3-aggregate-code-for-context","title":"Step 3: Aggregate Code for Context","text":"<p>Next, we need to gather our project's code into a single file that we can give to the LLM.</p> <pre><code>aicodec aggregate\n</code></pre> <p>This command reads your <code>config.json</code>, finds all relevant files (<code>calculator.py</code> in this case), and creates a <code>.aicodec/context.json</code> file. The output will look something like this:</p> <pre><code>Successfully aggregated 1 changed file(s) into '.aicodec/context.json'.\n</code></pre>"},{"location":"getting-started/tutorial/#step-4-generate-the-prompt","title":"Step 4: Generate the Prompt","text":"<p>Now, let's create the prompt for the LLM. We'll define our task using the <code>--task</code> flag.</p> <pre><code>aicodec prompt --task \"Add a new function 'subtract(a, b)' to the calculator. Also, create a new file named 'test_calculator.py' with a pytest unit test for the new subtract function.\"\n</code></pre> <p>This generates a prompt containing the instructions, your code context, and the required JSON schema. It's in your clipboard (by configuration).</p>"},{"location":"getting-started/tutorial/#step-5-interact-with-the-llm","title":"Step 5: Interact with the LLM","text":"<ol> <li>Paste the prompt into your favorite LLM chat interface (ChatGPT, Claude, etc.).</li> <li>The LLM will process the request and generate a JSON object as a response.</li> </ol> <p>A valid response for our task would look like this:</p> <pre><code>{\n  \"summary\": \"Adds a 'subtract' function and a corresponding unit test.\",\n  \"changes\": [\n    {\n      \"filePath\": \"calculator.py\",\n      \"action\": \"REPLACE\",\n      \"content\": \"# calculator.py\\ndef add(a, b):\\n    \\\"\\\"\\\"Adds two numbers together.\\\"\\\"\\\"\\n    return a + b\\n\\ndef subtract(a, b):\\n    \\\"\\\"\\\"Subtracts b from a.\\\"\\\"\\\"\\n    return a - b\\n\"\n    },\n    {\n      \"filePath\": \"test_calculator.py\",\n      \"action\": \"CREATE\",\n      \"content\": \"# test_calculator.py\\nfrom calculator import subtract\\n\\ndef test_subtract():\\n    assert subtract(5, 3) == 2\\n    assert subtract(10, 10) == 0\\n\"\n    }\n  ]\n}\n</code></pre> <ol> <li>Copy the raw JSON object from the LLM's response to your clipboard.</li> </ol>"},{"location":"getting-started/tutorial/#step-6-prepare-the-changes","title":"Step 6: Prepare the Changes","text":"<p>Now, feed the LLM's response into <code>aicodec</code>. Since we configured \"from clipboard\" as the default, this is simple:</p> <pre><code>aicodec prepare\n</code></pre> <p>This command validates the JSON from your clipboard against the schema and saves it to <code>.aicodec/changes.json</code>.</p>"},{"location":"getting-started/tutorial/#step-7-review-and-apply","title":"Step 7: Review and Apply","text":"<p>This is the most important step. Let's launch the review UI:</p> <pre><code>aicodec apply\n</code></pre> <p>Your web browser will open a local page showing a diff of the proposed changes.</p> <ul> <li>On the left, you'll see a list of files to be changed (<code>calculator.py</code> and <code>test_calculator.py</code>).</li> <li>You can click on each file to see a color-coded diff.</li> <li>You can even edit the code directly in the right-hand panel if the LLM made a small mistake.</li> <li>Ensure both changes are checked, and then click the \"Apply Selected Changes\" button.</li> </ul> <p>Once applied, check your file system. You'll see that <code>calculator.py</code> is updated and <code>test_calculator.py</code> has been created! The tool also creates a <code>.aicodec/revert.json</code> file as a safety net.</p>"},{"location":"getting-started/tutorial/#step-8-revert-the-changes-the-undo-button","title":"Step 8: Revert the Changes (The \"Undo\" Button)","text":"<p>Made a mistake? Don't like the changes? No problem.</p> <pre><code>aicodec revert\n</code></pre> <p>The same review UI will open, but this time it shows the inverse operation: modifying <code>calculator.py</code> back to its original state and deleting <code>test_calculator.py</code>.</p> <p>Click \"Revert Selected Changes\". Your project is now back to exactly how it was before Step 7.</p> <p>Congratulations! You've completed the entire AI Codec workflow.</p>"},{"location":"guides/best-practices/","title":"Best Practices &amp; Tips","text":"<p>To get the most out of <code>aicodec</code>, follow these best practices for context management, prompting, and workflow integration.</p>"},{"location":"guides/best-practices/#1-craft-specific-and-actionable-tasks","title":"1. Craft Specific and Actionable Tasks","text":"<p>The quality of the LLM's output depends heavily on the quality of your input.</p> <ul> <li>Be Specific: Instead of \"fix the bug,\" describe the bug and the expected behavior. \"The <code>add</code> function fails on negative numbers. Modify it to correctly handle them and add a new test case for <code>add(-2, -3)</code>.\"</li> <li>Be Atomic: Ask for one logical change at a time. It's better to run the workflow twice for two separate features than to ask for a huge, complex change in one prompt. This makes reviewing easier and reduces the chance of LLM errors.</li> <li>Specify File Names: If you want a new file created, tell the LLM its exact name and path (e.g., <code>src/utils/new_helper.py</code>).</li> </ul>"},{"location":"guides/best-practices/#2-manage-your-context-carefully","title":"2. Manage Your Context Carefully","text":"<p>The <code>context.json</code> file is your primary tool for focusing the LLM's attention. A smaller, more relevant context leads to faster, cheaper, and more accurate responses.</p> <ul> <li>Start with Defaults: The default configuration (using <code>.gitignore</code>) is often a great starting point.</li> <li>Use <code>include_</code> Rules for Focus: If you're only working on your API layer, use <code>\"include_dirs\": [\"src/api\"]</code> in your <code>config.json</code> to temporarily focus the context.</li> <li>Exclude Noise: Aggressively exclude directories and files that are never relevant, such as build artifacts, documentation, or large data assets.</li> <li>Use <code>--full</code> Sparingly: The default incremental aggregation (only adding changed files) is efficient. Only use <code>aicodec aggregate --full</code> when you've made significant changes to your configuration or need to give the LLM a complete picture of the project from scratch.</li> </ul>"},{"location":"guides/best-practices/#3-leverage-the-review-ui","title":"3. Leverage the Review UI","text":"<p>The web UI is your most important safety net. Don't just blindly click \"Apply.\"</p> <ul> <li>Review Every Diff: Carefully check each change. LLMs can sometimes make subtle mistakes, introduce typos, or remove important code.</li> <li>Use the Live Editor: Did the LLM almost get it right but miss a semicolon or a variable name? Don't reject the whole change. Click into the right-hand panel of the diff viewer and fix it directly. You can then save your edits back to <code>changes.json</code> or apply them immediately.</li> <li>Apply Selectively: If an LLM proposes five changes but only three are good, uncheck the bad ones and apply the rest. You can then run a new prompt to fix the remaining issues.</li> </ul>"},{"location":"guides/best-practices/#4-integrate-with-version-control","title":"4. Integrate with Version Control","text":"<p><code>aicodec</code> is designed to complement <code>git</code>, not replace it.</p> <ul> <li>Always Work on a Branch: Before starting the <code>aicodec</code> workflow, create a new git branch (<code>git checkout -b feature/llm-refactor</code>). This isolates the AI-generated changes.</li> <li>Review Before Committing: After a successful <code>aicodec apply</code>, use <code>git status</code> and <code>git diff</code> as a final sanity check before you <code>git add</code> and <code>git commit</code>.</li> <li>Use <code>revert</code> for a Clean Slate: If you're unhappy with the applied changes, <code>aicodec revert</code> will restore your files. <code>git status</code> should then show a clean working directory, and you can safely delete your feature branch.</li> </ul>"},{"location":"guides/git-integration/","title":"Git Integration","text":"<p><code>aicodec</code> is designed to work seamlessly with version control systems like Git. By combining <code>aicodec</code> with a good Git workflow, you can experiment with LLM-generated code safely and maintain a clean, professional commit history.</p>"},{"location":"guides/git-integration/#recommended-workflow","title":"Recommended Workflow","text":"<p>Here is the recommended workflow for using <code>aicodec</code> in a project managed with Git.</p>"},{"location":"guides/git-integration/#1-start-on-a-clean-branch","title":"1. Start on a Clean Branch","text":"<p>Before you begin, ensure your <code>main</code> branch is clean and up-to-date. Then, create a new feature branch for the changes you plan to make.</p> <pre><code># Make sure you're on the main branch and have the latest changes\ngit checkout main\ngit pull origin main\n\n# Create a new branch for your task\ngit checkout -b feature/add-user-authentication\n</code></pre> <p>Working on a dedicated branch isolates the AI-generated changes, making them easy to discard if they don't work out.</p>"},{"location":"guides/git-integration/#2-run-the-ai-codec-cycle","title":"2. Run the AI Codec Cycle","text":"<p>Now, perform the standard <code>aicodec</code> workflow on your new branch:</p> <ol> <li><code>aicodec aggregate</code></li> <li><code>aicodec prompt --task \"...\"</code></li> <li>(Get JSON response from LLM)</li> <li><code>aicodec prepare --from-clipboard</code></li> <li><code>aicodec apply</code></li> </ol>"},{"location":"guides/git-integration/#3-review-changes-in-git","title":"3. Review Changes in Git","text":"<p>After the <code>apply</code> command has finished, your files have been modified. <code>aicodec</code> has done its job, and now Git takes over.</p> <p>Use standard Git commands to review the state of your working directory:</p> <pre><code># See which files were created, modified, or deleted\ngit status\n\n# Review the exact line-by-line changes\ngit diff\n\n# Or review changes for a specific file\ngit diff src/models/user.py\n</code></pre> <p>This serves as a final, crucial sanity check.</p>"},{"location":"guides/git-integration/#4-commit-or-revert","title":"4. Commit or Revert","text":"<p>You now have two main options:</p> <p>A) If you are happy with the changes:</p> <p>Commit them to your feature branch with a clear message.</p> <pre><code>git add .\ngit commit -m \"feat: Add user model and authentication service via LLM\"\n</code></pre> <p>You can now continue working, push the branch, and open a pull request as you normally would.</p> <p>B) If you are NOT happy with the changes:</p> <p>Use the <code>aicodec revert</code> command to undo the operation.</p> <pre><code>aicodec revert\n</code></pre> <p>After the revert is complete, your working directory will be restored to its state before you ran <code>aicodec apply</code>. You can confirm this with <code>git status</code>, which should show no changes.</p> <pre><code>git status\n# On branch feature/add-user-authentication\n# nothing to commit, working tree clean\n</code></pre> <p>Your branch is now in a clean state, and you can either abandon it (<code>git checkout main &amp;&amp; git branch -D feature/add-user-authentication</code>) or try a different prompt with the LLM.</p>"},{"location":"guides/git-integration/#the-gitignore-file","title":"The <code>.gitignore</code> File","text":"<p>The <code>aicodec init</code> command will offer to add the <code>.aicodec/</code> directory to your <code>.gitignore</code> file. It is highly recommended that you do this.</p> <p>The files within this directory (<code>config.json</code>, <code>context.json</code>, <code>changes.json</code>, etc.) are specific to your local workflow and should not be committed to your project's history.</p>"}]}